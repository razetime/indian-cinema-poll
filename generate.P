:- use_module(library(csv)).
:- use_module(library(dcgs)).
:- use_module(library(pio)).
:- use_module(library(lists)).
:- use_module(library(reif)).
:- use_module(library(charsio)).
:- use_module(library(os)).
:- use_module(library(format)).
:- use_module(library(http/http_open)).
:- use_module(library(serialization/json)).
:- use_module(library(clpz)).

v(p(T,N,M,R))-->[T,N,_],seq(M),{length(M,10)},[R].
l([])   -->[].
l([A|B])-->[X],l(B),{v(A,X,[])}.
d([D|Ds])-->[D],{char_type(D,numeric)},d(Ds).
d([])    -->[].
ss-->[].
ss-->[_],ss.
ds(N)-->ss,d(N),{length(N,L),L#>2}.

t(X,Y,Z):-findall(T,char_type(Y,T),U),memberd_t(X,U,Z).
f(X,Y,Z):-tfilter(t(X),Y,Z).

j(pairs(J),[X|Y],Z):-member(string(X)-R,J),j(R,Y,Z).
j(list(J),[X|Y],Z):-nth0(X,J,R),j(R,Y,Z).
j(J,[],J).
j(J,_,{error,J}).

di(X,Y):-j(X,["job"],string(Z)),=(Z,"Director",Y).
gd(X,Y):-j(X,["name"],string(Y)).

gm(N,M):-once(gm_(N,M)).
gm_(N,m(I,T,Y,D)):-once(phrase(ds(Nf),N,_)),
  write_term(N,[double_quotes(true)]),nl,
  number_chars(I,Nf),getenv("TMDB_API_KEY",K),
  phrase(format_("https://api.themoviedb.org/3/movie/~s?api_key=~s\
&append_to_response=credits",[Nf,K]),U),
  write_term(U,[double_quotes(true)]),nl,
  http_open(U,S,[]),
  get_n_chars(S,_,R),phrase(json_chars(J),R),
  j(J,["title"],string(T)),
  j(J,["release_date"],string(C)),length(Y,4),append(Y,_,C),
  j(J,["credits","crew"],list(Cr)),tfilter(di,Cr,Dr),maplist(gd,Dr,D)
  .

en(p(T,N,M,R)):-
  maplist(gm,M,Ms),
  asserta(p(T,N,Ms,R)).

e(Mu):-phrase_from_file(parse_csv(frame(_,D)),"data.csv"),
  phrase(l(U),D),maplist(en,U)
  findall(M,p(_,_,M,_),Ms),append(Ms,Ml),sort(Ml,Mu)
  .
